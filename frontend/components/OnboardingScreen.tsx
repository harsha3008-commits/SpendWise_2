import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  TextInput, 
  Alert,
  ScrollView,
  Switch,
  KeyboardAvoidingView,
  Platform
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { 
  generateSalt, 
  deriveKey, 
  storeEncryptionKey, 
  storeSalt, 
  sha256,
  generateSecurePassphrase,
  createBackupKey
} from '../lib/crypto';
import { 
  markAppAsInitialized, 
  saveUserHash, 
  saveSettings,
  saveCategory 
} from '../lib/storage';
import { Settings, Category } from '../types';

interface OnboardingScreenProps {
  onComplete: () => void;
}

export default function OnboardingScreen({ onComplete }: OnboardingScreenProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [passphrase, setPassphrase] = useState('');
  const [confirmPassphrase, setConfirmPassphrase] = useState('');
  const [useAutoGenerated, setUseAutoGenerated] = useState(false);
  const [generatedPassphrase, setGeneratedPassphrase] = useState('');
  const [backupKey, setBackupKey] = useState('');
  const [biometricsEnabled, setBiometricsEnabled] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const steps = [
    'Privacy First',
    'Security Setup', 
    'Backup Key',
    'Preferences',
    'Ready!'
  ];

  const handleNext = async () => {
    if (currentStep === 1) {
      // Security setup validation
      if (!useAutoGenerated && (!passphrase || passphrase.length < 8)) {
        Alert.alert('Error', 'Passphrase must be at least 8 characters long');
        return;
      }
      
      if (!useAutoGenerated && passphrase !== confirmPassphrase) {
        Alert.alert('Error', 'Passphrases do not match');
        return;
      }
      
      await setupEncryption();
    } else if (currentStep === 3) {
      await completeOnboarding();
      return;
    }
    
    setCurrentStep(prev => prev + 1);
  };

  const handleGeneratePassphrase = () => {
    const generated = generateSecurePassphrase(16);
    setGeneratedPassphrase(generated);
    setUseAutoGenerated(true);
  };

  const setupEncryption = async () => {
    setIsLoading(true);
    try {
      const finalPassphrase = useAutoGenerated ? generatedPassphrase : passphrase;
      const salt = generateSalt();
      const encryptionKey = await deriveKey(finalPassphrase, salt);
      
      // Store encryption data
      await storeEncryptionKey(encryptionKey);
      await storeSalt(salt);
      await saveUserHash(sha256(finalPassphrase));
      
      // Generate backup key
      const backup = createBackupKey(encryptionKey);
      setBackupKey(backup);
      
    } catch (error) {
      console.error('Error setting up encryption:', error);
      Alert.alert('Error', 'Failed to set up encryption. Please try again.');
      return;
    } finally {
      setIsLoading(false);
    }
  };

  const completeOnboarding = async () => {
    setIsLoading(true);
    try {
      // Save default settings
      const defaultSettings: Settings = {
        currency: 'INR',
        biometricsEnabled,
        autoLockMinutes: 5,
        analyticsSharing: 'none',
        syncEnabled: false,
        notificationsEnabled: true,
        theme: 'dark',
        language: 'en',
        backupEnabled: true,
        encryptionSalt: await getSalt() || ''
      };
      await saveSettings(defaultSettings);

      // Initialize default categories
      await initializeDefaultCategories();
      
      // Mark app as initialized
      await markAppAsInitialized();
      
      onComplete();
    } catch (error) {
      console.error('Error completing onboarding:', error);
      Alert.alert('Error', 'Failed to complete setup. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const initializeDefaultCategories = async () => {
    const defaultCategories: Category[] = [
      { id: '1', name: 'Food & Dining', icon: 'üçΩÔ∏è', color: '#FF6B6B', type: 'expense', isDefault: true },
      { id: '2', name: 'Transportation', icon: 'üöó', color: '#4ECDC4', type: 'expense', isDefault: true },
      { id: '3', name: 'Shopping', icon: 'üõçÔ∏è', color: '#45B7D1', type: 'expense', isDefault: true },
      { id: '4', name: 'Entertainment', icon: 'üé¨', color: '#96CEB4', type: 'expense', isDefault: true },
      { id: '5', name: 'Bills & Utilities', icon: 'üìã', color: '#FECA57', type: 'expense', isDefault: true },
      { id: '6', name: 'Healthcare', icon: 'üè•', color: '#FF9FF3', type: 'expense', isDefault: true },
      { id: '7', name: 'Salary', icon: 'üíº', color: '#10B981', type: 'income', isDefault: true },
      { id: '8', name: 'Investment', icon: 'üìà', color: '#3B82F6', type: 'income', isDefault: true },
      { id: '9', name: 'Gift', icon: 'üéÅ', color: '#8B5CF6', type: 'income', isDefault: true },
      { id: '10', name: 'Other', icon: 'üìù', color: '#6B7280', type: 'expense', isDefault: true }
    ];

    for (const category of defaultCategories) {
      await saveCategory(category);
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <View style={styles.stepContent}>
            <Ionicons name="shield-checkmark" size={80} color="#10B981" style={styles.icon} />
            <Text style={styles.title}>Privacy First Finance</Text>
            <Text style={styles.description}>
              SpendWise keeps your financial data completely private and secure.
              {'\n\n'}
              ‚Ä¢ All data encrypted locally on your device
              {'\n'}
              ‚Ä¢ No data sent to external servers
              {'\n'}
              ‚Ä¢ Blockchain-style transaction verification
              {'\n'}
              ‚Ä¢ You control your financial privacy
            </Text>
          </View>
        );

      case 1:
        return (
          <KeyboardAvoidingView 
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
            style={styles.stepContent}
          >
            <Ionicons name="key" size={80} color="#10B981" style={styles.icon} />
            <Text style={styles.title}>Secure Your Wallet</Text>
            <Text style={styles.description}>
              Create a master passphrase to encrypt your financial data
            </Text>

            <View style={styles.optionContainer}>
              <TouchableOpacity
                style={[styles.option, useAutoGenerated && styles.optionSelected]}
                onPress={handleGeneratePassphrase}
              >
                <Text style={[styles.optionText, useAutoGenerated && styles.optionTextSelected]}>
                  Generate Secure Passphrase
                </Text>
                <Text style={styles.optionDescription}>
                  Recommended: We'll create a strong passphrase for you
                </Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={[styles.option, !useAutoGenerated && styles.optionSelected]}
                onPress={() => setUseAutoGenerated(false)}
              >
                <Text style={[styles.optionText, !useAutoGenerated && styles.optionTextSelected]}>
                  Create My Own Passphrase
                </Text>
                <Text style={styles.optionDescription}>
                  Use your own memorable passphrase (min 8 characters)
                </Text>
              </TouchableOpacity>
            </View>

            {useAutoGenerated && generatedPassphrase ? (
              <View style={styles.generatedContainer}>
                <Text style={styles.generatedLabel}>Your Generated Passphrase:</Text>
                <Text style={styles.generatedPassphrase}>{generatedPassphrase}</Text>
                <Text style={styles.warningText}>
                  ‚ö†Ô∏è Save this passphrase securely. You'll need it to access your data.
                </Text>
              </View>
            ) : !useAutoGenerated ? (
              <View style={styles.inputContainer}>
                <TextInput
                  style={styles.input}
                  placeholder="Enter passphrase"
                  placeholderTextColor="#64748B"
                  value={passphrase}
                  onChangeText={setPassphrase}
                  secureTextEntry
                  autoCapitalize="none"
                />
                <TextInput
                  style={styles.input}
                  placeholder="Confirm passphrase"
                  placeholderTextColor="#64748B"
                  value={confirmPassphrase}
                  onChangeText={setConfirmPassphrase}
                  secureTextEntry
                  autoCapitalize="none"
                />
              </View>
            ) : null}
          </KeyboardAvoidingView>
        );

      case 2:
        return (
          <View style={styles.stepContent}>
            <Ionicons name="qr-code" size={80} color="#10B981" style={styles.icon} />
            <Text style={styles.title}>Backup Key</Text>
            <Text style={styles.description}>
              Your backup key can restore access to your encrypted data if you forget your passphrase.
            </Text>

            {backupKey && (
              <View style={styles.backupContainer}>
                <Text style={styles.backupLabel}>Backup Key:</Text>
                <View style={styles.backupKeyContainer}>
                  <Text style={styles.backupKey}>{backupKey}</Text>
                </View>
                <Text style={styles.warningText}>
                  üíæ Save this backup key in a secure location. It's your only recovery option.
                </Text>
              </View>
            )}
          </View>
        );

      case 3:
        return (
          <View style={styles.stepContent}>
            <Ionicons name="settings" size={80} color="#10B981" style={styles.icon} />
            <Text style={styles.title}>Preferences</Text>
            <Text style={styles.description}>
              Customize your security and privacy settings
            </Text>

            <View style={styles.preferenceContainer}>
              <View style={styles.preference}>
                <View style={styles.preferenceInfo}>
                  <Text style={styles.preferenceTitle}>Biometric Authentication</Text>
                  <Text style={styles.preferenceDescription}>
                    Use fingerprint or face recognition to unlock
                  </Text>
                </View>
                <Switch
                  value={biometricsEnabled}
                  onValueChange={setBiometricsEnabled}
                  trackColor={{ false: '#374151', true: '#10B981' }}
                  thumbColor="#F3F4F6"
                />
              </View>
            </View>
          </View>
        );

      case 4:
        return (
          <View style={styles.stepContent}>
            <Ionicons name="checkmark-circle" size={80} color="#10B981" style={styles.icon} />
            <Text style={styles.title}>You're All Set!</</Text>
            <Text style={styles.description}>
              SpendWise is ready to help you manage your finances privately and securely.
              {'\n\n'}
              üîí Your data is encrypted and secure
              {'\n'}
              üè† Everything stays on your device
              {'\n'}
              ‚õìÔ∏è Blockchain-verified transactions
              {'\n'}
              üìä Smart financial insights
            </Text>
          </View>
        );

      default:
        return null;
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.appName}>SpendWise</Text>
        <View style={styles.progressContainer}>
          <Text style={styles.stepText}>
            {currentStep + 1} of {steps.length}
          </Text>
          <View style={styles.progressBar}>
            <View 
              style={[
                styles.progressFill, 
                { width: `${((currentStep + 1) / steps.length) * 100}%` }
              ]} 
            />
          </View>
        </View>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {renderStepContent()}
      </ScrollView>

      <View style={styles.footer}>
        {currentStep > 0 && (
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => setCurrentStep(prev => prev - 1)}
          >
            <Text style={styles.backButtonText}>Back</Text>
          </TouchableOpacity>
        )}

        <TouchableOpacity
          style={[styles.nextButton, isLoading && styles.nextButtonDisabled]}
          onPress={handleNext}
          disabled={isLoading}
        >
          <Text style={styles.nextButtonText}>
            {currentStep === steps.length - 1 ? 'Get Started' : 'Next'}
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0F172A',
  },
  header: {
    paddingTop: 60,
    paddingHorizontal: 24,
    paddingBottom: 24,
  },
  appName: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#10B981',
    textAlign: 'center',
    marginBottom: 24,
  },
  progressContainer: {
    alignItems: 'center',
  },
  stepText: {
    fontSize: 16,
    color: '#94A3B8',
    marginBottom: 8,
  },
  progressBar: {
    width: '100%',
    height: 4,
    backgroundColor: '#374151',
    borderRadius: 2,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#10B981',
    borderRadius: 2,
  },
  content: {
    flex: 1,
    paddingHorizontal: 24,
  },
  stepContent: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  icon: {
    marginBottom: 24,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#F1F5F9',
    textAlign: 'center',
    marginBottom: 16,
  },
  description: {
    fontSize: 16,
    color: '#94A3B8',
    textAlign: 'center',
    lineHeight: 24,
  },
  optionContainer: {
    width: '100%',
    marginTop: 32,
  },
  option: {
    borderWidth: 1,
    borderColor: '#374151',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    backgroundColor: '#1E293B',
  },
  optionSelected: {
    borderColor: '#10B981',
    backgroundColor: '#064E3B',
  },
  optionText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#F1F5F9',
    marginBottom: 4,
  },
  optionTextSelected: {
    color: '#10B981',
  },
  optionDescription: {
    fontSize: 14,
    color: '#94A3B8',
  },
  inputContainer: {
    width: '100%',
    marginTop: 24,
  },
  input: {
    borderWidth: 1,
    borderColor: '#374151',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    fontSize: 16,
    color: '#F1F5F9',
    backgroundColor: '#1E293B',
  },
  generatedContainer: {
    width: '100%',
    marginTop: 24,
    padding: 20,
    backgroundColor: '#1E293B',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#10B981',
  },
  generatedLabel: {
    fontSize: 16,
    color: '#10B981',
    fontWeight: '600',
    marginBottom: 8,
  },
  generatedPassphrase: {
    fontSize: 18,
    color: '#F1F5F9',
    fontFamily: 'monospace',
    textAlign: 'center',
    padding: 12,
    backgroundColor: '#0F172A',
    borderRadius: 8,
    marginBottom: 12,
  },
  backupContainer: {
    width: '100%',
    marginTop: 24,
    alignItems: 'center',
  },
  backupLabel: {
    fontSize: 16,
    color: '#10B981',
    fontWeight: '600',
    marginBottom: 12,
  },
  backupKeyContainer: {
    padding: 16,
    backgroundColor: '#1E293B',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#374151',
    marginBottom: 16,
  },
  backupKey: {
    fontSize: 20,
    color: '#F1F5F9',
    fontFamily: 'monospace',
    textAlign: 'center',
  },
  warningText: {
    fontSize: 14,
    color: '#F59E0B',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  preferenceContainer: {
    width: '100%',
    marginTop: 32,
  },
  preference: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 16,
    backgroundColor: '#1E293B',
    borderRadius: 12,
    marginBottom: 12,
  },
  preferenceInfo: {
    flex: 1,
    marginRight: 16,
  },
  preferenceTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#F1F5F9',
    marginBottom: 4,
  },
  preferenceDescription: {
    fontSize: 14,
    color: '#94A3B8',
  },
  footer: {
    flexDirection: 'row',
    paddingHorizontal: 24,
    paddingVertical: 24,
    paddingBottom: 40,
  },
  backButton: {
    flex: 1,
    paddingVertical: 16,
    marginRight: 12,
    borderWidth: 1,
    borderColor: '#374151',
    borderRadius: 12,
    alignItems: 'center',
  },
  backButtonText: {
    fontSize: 16,
    color: '#94A3B8',
    fontWeight: '600',
  },
  nextButton: {
    flex: 2,
    paddingVertical: 16,
    backgroundColor: '#10B981',
    borderRadius: 12,
    alignItems: 'center',
  },
  nextButtonDisabled: {
    backgroundColor: '#374151',
  },
  nextButtonText: {
    fontSize: 16,
    color: '#F1F5F9',
    fontWeight: '600',
  },
});